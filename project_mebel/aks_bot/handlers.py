from aiogram.types import Message, CallbackQuery
from aiogram import F, Router
from aiogram.filters import CommandStart, Command

from AksMebel.project_mebel.aks_bot.database.requests import mebel_aks
import AksMebel.project_mebel.aks_bot.keyboards as kb

router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(text=f'üòÉ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å {message.from_user.full_name} –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ üëã', reply_markup=kb.main)

@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('‚öôÔ∏è –í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏')

@router.message(F.text == 'üí¨ –°–æ–æ–±—â–∏—Ç—å –Ω–∞–º –æ –ø—Ä–æ–±–ª–µ–º–µ')
async def text_problem(message: Message):
    await message.answer('üõ† –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —É –≤–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞', reply_markup=kb.text_problem)

@router.message(F.text == 'üòâ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à—É –º–µ–±–µ–ª—å?')
async def catalog_mebel(message: Message):
    await message.answer('‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—à–µ–π –º–µ–±–µ–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', reply_markup = kb.catalog_mebel)

@router.message(F.text == 'üñçÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à Telegram')
async def myagkay_mebel(message: Message):
    await message.answer('–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª')

@router.callback_query(F.data == 'm1')
async def m_mebel_call(callback: CallbackQuery):
    for row in mebel_aks(1):
        text = (f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {row[2]} \n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {row[0]} \n"
                f"<b>üí∏ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:</b> {row[1]} \n"
                f"<b>–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:</b> {row[3]} \n"
                f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞:</b> {row[4]} \n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {row[5]} \n")
        await callback.answer()
        await callback.message.answer(text = text, reply_markup = kb.next_page, parse_mode="HTML")

@router.callback_query(F.data == 'm2')
async def m_mebel_call2(callback: CallbackQuery):
    for row in mebel_aks(2):
        text = (f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {row[2]} \n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {row[0]} \n"
                f"<b>üí∏ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:</b> {row[1]} \n"
                f"<b>–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:</b> {row[3]} \n"
                f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞:</b> {row[4]} \n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {row[5]} \n")
        await callback.answer()
        await callback.message.answer(text = text, reply_markup = kb.next_page,parse_mode="HTML")

@router.callback_query(F.data == 'm3')
async def m_mebel_call3(callback: CallbackQuery):
    for row in mebel_aks(3):
        text = (f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {row[2]} \n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {row[0]} \n"
                f"<b>üí∏ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:</b> {row[1]} \n"
                f"<b>–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:</b> {row[3]} \n"
                f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞:</b> {row[4]} \n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {row[5]} \n")
        await callback.answer()
        await callback.message.answer(text = text, reply_markup = kb.next_page, parse_mode="HTML")

@router.callback_query(F.data == 'm4')
async def m_mebel_call4(callback: CallbackQuery):
    for row in mebel_aks(4):
        text = (f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {row[2]} \n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {row[0]} \n"
                f"<b>üí∏ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:</b> {row[1]} \n"
                f"<b>–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:</b> {row[3]} \n"
                f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞:</b> {row[4]} \n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {row[5]} \n")
        await callback.answer()
        await callback.message.answer(text = text, reply_markup = kb.next_page, parse_mode="HTML")

@router.callback_query(F.data == 'm5')
async def m_mebel_call5(callback: CallbackQuery):
    for row in mebel_aks(5):
        text = (f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {row[2]} \n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {row[0]} \n"
                f"<b>üí∏ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:</b> {row[1]} \n"
                f"<b>–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:</b> {row[3]} \n"
                f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞:</b> {row[4]} \n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {row[5]} \n")
        await callback.answer()
        await callback.message.answer(text = text, reply_markup = kb.next_page, parse_mode="HTML")

# @router.callback_query(F.data == 'next')
# async def m_mebel_call11(callback: CallbackQuery):
#     for row in mebel_aks_next(1):
#         text = (f"<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> {row[2]} \n"
#                 f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> {row[0]} \n"
#                 f"<b>üí∏ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞:</b> {row[1]} \n"
#                 f"<b>–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:</b> {row[3]} \n"
#                 f"<b>–ú–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞:</b> {row[4]} \n"
#                 f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {row[5]} \n")
#         await callback.answer()
#         await callback.message.answer(text = text, reply_markup = kb.next_page, parse_mode="HTML")
